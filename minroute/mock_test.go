// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package minroute

import (
	"context"
	"sync"
)

// Ensure, that LoggerMock does implement Logger.
// If this is not the case, regenerate this file with moq.
var _ Logger = &LoggerMock{}

// LoggerMock is a mock implementation of Logger.
//
//	func TestSomethingThatUsesLogger(t *testing.T) {
//
//		// make and configure a mocked Logger
//		mockedLogger := &LoggerMock{
//			ErrorFunc: func(ctx context.Context, msg string, err error, kv ...any)  {
//				panic("mock out the Error method")
//			},
//			InfoFunc: func(ctx context.Context, msg string, kv ...any)  {
//				panic("mock out the Info method")
//			},
//			WithFieldsFunc: func(ctx context.Context, kv ...any) context.Context {
//				panic("mock out the WithFields method")
//			},
//		}
//
//		// use mockedLogger in code that requires Logger
//		// and then make assertions.
//
//	}
type LoggerMock struct {
	// ErrorFunc mocks the Error method.
	ErrorFunc func(ctx context.Context, msg string, err error, kv ...any)

	// InfoFunc mocks the Info method.
	InfoFunc func(ctx context.Context, msg string, kv ...any)

	// WithFieldsFunc mocks the WithFields method.
	WithFieldsFunc func(ctx context.Context, kv ...any) context.Context

	// calls tracks calls to the methods.
	calls struct {
		// Error holds details about calls to the Error method.
		Error []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg string
			// Err is the err argument value.
			Err error
			// Kv is the kv argument value.
			Kv []any
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg string
			// Kv is the kv argument value.
			Kv []any
		}
		// WithFields holds details about calls to the WithFields method.
		WithFields []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Kv is the kv argument value.
			Kv []any
		}
	}
	lockError      sync.RWMutex
	lockInfo       sync.RWMutex
	lockWithFields sync.RWMutex
}

// Error calls ErrorFunc.
func (mock *LoggerMock) Error(ctx context.Context, msg string, err error, kv ...any) {
	if mock.ErrorFunc == nil {
		panic("LoggerMock.ErrorFunc: method is nil but Logger.Error was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Msg string
		Err error
		Kv  []any
	}{
		Ctx: ctx,
		Msg: msg,
		Err: err,
		Kv:  kv,
	}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	mock.ErrorFunc(ctx, msg, err, kv...)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//
//	len(mockedLogger.ErrorCalls())
func (mock *LoggerMock) ErrorCalls() []struct {
	Ctx context.Context
	Msg string
	Err error
	Kv  []any
} {
	var calls []struct {
		Ctx context.Context
		Msg string
		Err error
		Kv  []any
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *LoggerMock) Info(ctx context.Context, msg string, kv ...any) {
	if mock.InfoFunc == nil {
		panic("LoggerMock.InfoFunc: method is nil but Logger.Info was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Msg string
		Kv  []any
	}{
		Ctx: ctx,
		Msg: msg,
		Kv:  kv,
	}
	mock.lockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	mock.lockInfo.Unlock()
	mock.InfoFunc(ctx, msg, kv...)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//
//	len(mockedLogger.InfoCalls())
func (mock *LoggerMock) InfoCalls() []struct {
	Ctx context.Context
	Msg string
	Kv  []any
} {
	var calls []struct {
		Ctx context.Context
		Msg string
		Kv  []any
	}
	mock.lockInfo.RLock()
	calls = mock.calls.Info
	mock.lockInfo.RUnlock()
	return calls
}

// WithFields calls WithFieldsFunc.
func (mock *LoggerMock) WithFields(ctx context.Context, kv ...any) context.Context {
	if mock.WithFieldsFunc == nil {
		panic("LoggerMock.WithFieldsFunc: method is nil but Logger.WithFields was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Kv  []any
	}{
		Ctx: ctx,
		Kv:  kv,
	}
	mock.lockWithFields.Lock()
	mock.calls.WithFields = append(mock.calls.WithFields, callInfo)
	mock.lockWithFields.Unlock()
	return mock.WithFieldsFunc(ctx, kv...)
}

// WithFieldsCalls gets all the calls that were made to WithFields.
// Check the length with:
//
//	len(mockedLogger.WithFieldsCalls())
func (mock *LoggerMock) WithFieldsCalls() []struct {
	Ctx context.Context
	Kv  []any
} {
	var calls []struct {
		Ctx context.Context
		Kv  []any
	}
	mock.lockWithFields.RLock()
	calls = mock.calls.WithFields
	mock.lockWithFields.RUnlock()
	return calls
}
